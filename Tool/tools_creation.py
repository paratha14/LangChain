# -*- coding: utf-8 -*-
"""tools_creation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b5bIThl-3LFP5rDpTne_T5KL7vFdLBPy
"""

!pip install langchain_community

!pip install -U duckduckgo-search

!pip install ddgs

"""Using @tool decorater for creating custom tools

"""

from langchain_community.tools import DuckDuckGoSearchRun
from langchain_core.tools import tool
@tool
def searching(n:int , name:str)-> str:
  """for searching user defined numbers of facts about a current affair or something """
  search= DuckDuckGoSearchRun()
  query=f"Search for atleast{n} facts about {name}"
  result= search.invoke(query)
  return result

x= "ind vs eng 2025 4th test"
searching.invoke({"n":3, "name":x})

"""using structuredTool along with pydantic

"""

from langchain.tools import StructuredTool
from pydantic import BaseModel, Field

class Classification(BaseModel):
  a: int = Field(required= "true", description="first number for multiplication")
  b: int = Field(required= "true", description="second number for multiplication")

def mul(a:int ,b:int)->int :
  return a*b

mult_tool= StructuredTool(
    func=mul,
    name="mult",
    description="for multiplication of two numbers",
    args_schema=Classification
)

result= mult_tool.invoke({"a":4,"b":7})
print(result)

"""Using BaseTool"""

class multy(BaseModel):
  a: int = Field(required= "true", description="first number for multiplication")
  b: int = Field(required= "true", description="second number for multiplication")

from langchain.tools import BaseTool
from typing import Type

class Multipl(BaseTool):
  name: str ="multiplic",
  description:str=  "for multiplying 2 numbers",
  args_schema: Type[BaseModel]= multy

  def _run(self, a:int, b:int)->int:
    return a*b

multi_tool= Multipl()

result= multi_tool.invoke({"a":8,"b":4})
print(result)

